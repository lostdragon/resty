<?php defined('SYS_PATH') or die('No direct script access.');
/**
 * Rest Core.
 *
 * @package    System
 * @category   Core
 * @author     Momo Team
 * @copyright  (c) 2009-2012 Momo Team
 */
class Rest {

	protected static $_instance;

	// Common environment type constants for consistency and convenience
	const PRODUCTION = 10;
	const STAGING = 20;
	const TESTING = 30;
	const DEVELOPMENT = 40;

	// Security check that is added to all generated PHP files
	const FILE_SECURITY = '<?php defined(\'SYS_PATH\') or die(\'No direct script access.\');';


	/**
	 * @var array loaded modules
	 */
	protected static $_modules = array();

	/**
	 * @var array find file paths
	 */
	protected static $_paths = array(APP_PATH, SYS_PATH);

	/**
	 * cache find files
	 * @var array
	 */
	protected static $_files = array();

	/**
	 * @var  string  Current environment name
	 */
	public static $environment = Rest::DEVELOPMENT;

	/**
	 * @var  string
	 */
	public static $content_type = 'application/json';

	/**
	 * @var  string
	 */
	public static $charset = 'utf-8';

	/**
	 * @var  array  Types of errors to display at shutdown
	 */
	public static $shutdown_errors = array(E_PARSE, E_ERROR, E_USER_ERROR);

	/**
	 * @var  Rest_Log logging object
	 */
	public static $log;

	/**
	 * @var  boolean  Has [Rest::init] been called?
	 */
	protected static $_init = FALSE;

	/**
	 * @var  string  base URL to the application
	 */
	public static $base_url = '/';

	/**
	 * @var  string  Application index file, added to links generated by Rest. Set by [Rest::init]
	 */
	public static $index_file = 'index.php';

	/**
	 * @static
	 * @return Rest
	 */
	public static function instance()
	{
		if (empty(self::$_instance))
		{
			self::$_instance = new Rest();
		}
		return self::$_instance;
	}

	/**
	 * 初始化，完成自动加载、错误处理
	 */
	public static function init($settings = array())
	{
		ob_start();
		spl_autoload_register(array('Rest', 'auto_load'));

		// Enable Rest exception handling, adds stack traces and error source.
		set_exception_handler(array('Rest_Exception', 'handler'));

		// Enable Rest error handling, converts all PHP errors to exceptions.
		set_error_handler(array('Rest', 'error_handler'));

		// Enable the Rest shutdown handler, which catches E_FATAL errors.
		register_shutdown_function(array('Rest', 'shutdown_handler'));

		Rest_Config::set('_request_time', microtime(TRUE));

		if (isset($settings['base_url']))
		{
			// Set the base URL
			Rest::$base_url = rtrim($settings['base_url'], '/') . '/';
		}

		if (isset($settings['index_file']))
		{
			// Set the index file
			Rest::$index_file = trim($settings['index_file'], '/');
		}

		// Load the logger
		Rest::$log = Rest_Log::instance();

		Rest::$_init = TRUE;
	}

	/**
	 * 查找文件
	 * @param string $filename 文件名
	 * @param string $folder 目录
	 * @return bool|string
	 */
	public static function find_file($filename, $folder = 'classes')
	{
		$name = $folder . '_' . $filename;
		if (! isset(Rest::$_files[$name]))
		{
			$pos = strpos($filename, '_');
			$module = $pos !== FALSE ? substr($filename, 0, $pos) : $filename;

			$filename = str_replace('_', DS, $name);
			Rest::$_files[$name] = FALSE;
			if ($module == 'rest')
			{
				$file = SYS_PATH . $filename . '.php';
//				if (is_file($file))
//				{
				Rest::$_files[$name] = $file;
//				}
			}
			elseif (isset(Rest::$_modules[$module]))
			{
				$file = Rest::$_modules[$module] . $filename . '.php';
//				if (is_file($file))
//				{
				Rest::$_files[$name] = $file;
//				}
			}
			else
			{
				foreach (Rest::$_paths as $path)
				{
					$file = $path . $filename . '.php';
					if (is_file($file))
					{
						Rest::$_files[$name] = $file;
						break;
					}
				}
			}
		}
		return Rest::$_files[$name];
	}

	/**
	 * auto load class
	 * @param $name
	 * @return bool
	 */
	public static function auto_load($name)
	{
		static $loads = array();
		if(!isset($loads[$name])) {
			if ($file = self::find_file(strtolower($name)))
			{
				require $file;
				$loads[$name] = TRUE;
			} else {
				$loads[$name] = TRUE;
			}
		}
		return $loads[$name];
	}

	/**
	 * PHP error handler, converts all errors into ErrorExceptions. This handler
	 * respects error_reporting settings.
	 * @param int $code
	 * @param string $error
	 * @param string $file
	 * @param int $line
	 * @throws  ErrorException
	 * @return  bool
	 */
	public static function error_handler($code, $error, $file = NULL, $line = NULL)
	{
		/**
		 * @note error_reporting has bug, sometimes return 0,sometimes return current error reporting level
		 * 只要发生错误，都进行错误处理，忽略error_reporting设置
		 */
		// if (error_reporting() & $code)
		if ($code)
		{
			//针对生产环境忽略一些错误
			if (Rest::$environment === Rest::PRODUCTION AND in_array($code, array(E_NOTICE, E_STRICT, E_DEPRECATED)))
			{
				return TRUE;
			}
			// This error is not suppressed by current error reporting settings
			// Convert the error into an ErrorException
			Rest_Exception::handler(new ErrorException($error, $code, 0, $file, $line));
		}

		// Do not execute the PHP error handler
		return TRUE;
	}

	/**
	 * Catches errors that are not caught by the error handler, such as E_PARSE.
	 *
	 * @uses    Rest_Exception::handler
	 * @return  void
	 */
	public static function shutdown_handler()
	{
		if (! Rest::$_init)
		{
			// Do not execute when not active
			return;
		}

		if ($error = error_get_last() AND in_array($error['type'], Rest::$shutdown_errors))
		{

			// Clean the output buffer
			ob_get_level() AND ob_clean();
			// Fake an exception for nice debugging
			Rest_Exception::handler(new ErrorException($error['message'], $error['type'], 0, $error['file'], $error['line']));

			// Shutdown now to avoid a "death loop"
			exit(1);
		}
	}

	/**
	 * Changes the currently enabled modules. Module paths may be relative
	 * or absolute, but must point to a directory:
	 *
	 *     Rest::modules(array('modules/foo', MOD_PATH.'bar'));
	 *
	 * @param   array $modules  list of module paths
	 * @return  array  enabled modules
	 * @throws  Rest_Exception
	 */
	public static function modules(array $modules = NULL)
	{
		if ($modules === NULL)
		{
			// Not changing modules, just return the current set
			return Rest::$_modules;
		}

		// Start a new list of include paths, APP_PATH first
		$paths = array(APP_PATH);

		foreach ($modules as $name => $path)
		{
//			if (is_dir($path))
//			{
			// Add the module to include paths
			$paths[] = $modules[$name] = $path . DS;
//			}
			/*
			else
			{
				// This module is invalid, remove it
				throw new Rest_Exception(Rest_Response::HTTP_SERVER_ERROR,
					'Attempted to load an invalid or missing module \':module\' at \':path\'',
					array(
					     ':module' => $name,
					     ':path' => Rest_Exception::path($path),
					)
				);
			}
			*/
		}

		// Finish the include paths by adding SYS_PATH
		$paths[] = SYS_PATH;

		// Set the new include paths
		Rest::$_paths = $paths;

		// Set the current module list
		Rest::$_modules = $modules;

		return Rest::$_modules;
	}
}

if (! function_exists('__'))
{
	/**
	 * Rest translation function. The PHP function
	 * [strtr](http://php.net/strtr) is used for replacing parameters.
	 *
	 *    __('Welcome back, :user', array(':user' => $username));
	 *
	 *
	 * @param   string $string  text to translate
	 * @param   array  $values values to replace in the translated text
	 * @return  string
	 */
	function __($string, array $values = NULL)
	{
		return empty($values) ? $string : strtr($string, $values);
	}
}
